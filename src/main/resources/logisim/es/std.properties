#
# std/Builtin.java
#
builtinLibrary = Incorporada
# instance/StdAttr.java
stdFacingAttr = Orientación
stdDataWidthAttr = Bits de datos
stdTriggerAttr = Trigger
stdTriggerRising = Rising Edge
stdTriggerFalling = Falling Edge
stdTriggerHigh = High Level
stdTriggerLow = Low Level
stdLabelAttr = Etiqueta
stdLabelFontAttr = Fuente de la etiqueta
# instance/InstanceTextField.java
changeLabelAction = Fuente del etiquetado
#
# std/base/Base.java
#
baseLibrary = Base

# std/base/BitExtender.java
extenderComponent = Extensor de bits
extenderInAttr = Bits de entrada
extenderOutAttr = Bits de salida
extenderTypeAttr = Tipo de extensión
extenderOneType = Uno
extenderZeroType = Cero
extenderSignType = Signo
extenderInputType = Entrada
extenderMainLabel = extend
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = sign
extenderInputLabel = input

# std/base/Clock
clockComponent = Reloj
clockHighAttr = Duración del nivel alto
clockLowAttr = Duración del nivel bajo
clockDurationValue = %s Ticks
clockDurationOneValue = 1 Tick
durationSmallMessage = El valor debe ser al menos %s.
durationLargeMessage = El calor debe ser %s o menos.
freqInvalidMessage = El valor no es un entero válido

# std/base/Pin
pinComponent = Pin
pinInputName = Entrada
pinOutputName = Salida
pinThreeStateAttr = ¿Tres-estados?
pinOutputAttr = ¿Salida?
pinPullAttr = Comportamiento de pines
pinPullNoneOption = Invariante
pinPullUpOption = Adoptar nivel alto
pinPullDownOption = Adoptar nivel bajo
pinLabelLocAttr = Posición de la etiqueta
pinInputToolTip = Añadir pin de entrada
pinOutputToolTip = Añadir pin de salida
pinFrozenTitle = Pin asociado al supercircuito.
pinFrozenQuestion = El pin está relacionado con el estado del circuito. ¿Crear un nuevo estado del circuito?

# std/base/Probe
probeComponent = Ver

# std/base/PullResistor
pullComponent = Pull Resistor
pullTypeAttr = Pull Direction
pullZeroType = Cero
pullOneType = Uno
pullErrorType = Error

# std/base/Text.java
textComponent = Etiqueta
textTextAttr = Texto
textFontAttr = Fuente
textHorzAlignAttr = Alineamiento horizontal
textHorzAlignLeftOpt = Izquierda
textHorzAlignRightOpt = Derecha
textHorzAlignCenterOpt = Centro
textVertAlignAttr = Alineamiento vertical
textVertAlignTopOpt = Arriba
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Abajo
textVertAlignCenterOpt = Centro

# std/base/Tunnel.java
tunnelComponent = Tunel

#
# std/Wiring.java
#
wiringLibrary = Cableado
wiringGateAttr = Posición de la puerta
wiringGateBottomRightOption = Inferior/Derecha
wiringGateTopLeftOption = Superior/Izquierda

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Tipo
transistorTypeP = Tipo-P
transistorTypeN = Tipo-N

# std/wiring/TransmissionGate.java
transmissionGateComponent = Puerta de transmisión

# std/wiring/Power.java
powerComponent = Fuente de poder

# std/wiring/Ground.java
groundComponent = Tierra

#
# std/Gates.java
#
gatesLibrary = Puertas
gateSizeAttr = Tamaño de puerta
gateSizeNarrowOpt = Estrecho
gateSizeNormalOpt = Medio
gateSizeWideOpt = Ancho
gateNegateAttr = Negar %s
gateInputsAttr = Número de entradas
gateOutput01 = 0/1
gateOutput0Z = 0/floating
gateOutputZ1 = floating/1
gateOutputAttr = Valor de salida
xorBehaviorAttr = Comportamiento múltiples entradas
xorBehaviorOne = Cuando una puerta esta encendida
xorBehaviorOdd = Cuando un numero impar de entradas esta encendidas
# std/Constant.java
constantComponent = Constante
constantValueAttr = Valor
# std/NotGate.java
notGateComponent = Puerta NOT
# std/Buffer.java
bufferComponent = Búffer
# std/AndGate.java
andGateComponent = Puerta AND
# std/NandGate.java
nandGateComponent = Puerta NAND
# std/NorGate.java
norGateComponent = Puerta NOR
# std/OrGate.java
orGateComponent = Puerta OR
# std/XorGate.java
xorGateComponent = Puerta XOR
# std/XnorGate.java
xnorGateComponent = Puerta XNOR
# std/OddParityGate.java
oddParityComponent = Detector imparidad
# std/EvenParityGate.java
evenParityComponent = Detector paridad
# std/ControlledBuffer.java
controlledBufferComponent = Búffer controlado
controlledInverterComponent = Inversor controlado
controlledControlOption = Control Line Location
controlledLeftHanded = Left-Handed
controlledRightHanded = Right-Handed
#
# std/Memory.java
#
memoryLibrary = Memoria
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Clock: state updates on trigger
flipFlopQTip = Current flip-flop state
flipFlopNotQTip = Complement of current flip-flop state
flipFlopResetTip = Clear: When 1, pin state to 0 asynchronously
flipFlopPresetTip = Preset: When 1, pin state to 1 asynchronously
flipFlopEnableTip = Enable: When 0, clock triggers are ineffective
# std/Counter.java
counterComponent = Contador
counterMaxAttr   = Maximum Value
counterGoalAttr  = Action On Overflow
counterGoalWrap  = Wrap around
counterGoalStay  = Stay at value
counterGoalContinue = Continue counting
counterGoalLoad  = Load next value
counterQTip      = Output: current value of counter
counterClockTip  = Clock: value may update on trigger
counterDataTip   = Data: value to load into counter
counterLoadTip   = Load: when 1, loads from data input (if Count = 0) or decrements
counterEnableTip = Count: when 1, counter increments (or decrements if Load = 1)
counterResetTip  = Clear: when 1, resets to 0 asynchronously
counterCarryTip  = Carry: is 1 when value reaches maximum (minimum if decrementing)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = Biestable D
# std/TFlipFlop.java
tFlipFlopComponent = Biestable T
# std/JKFlipFlop.java
jkFlipFlopComponent = Biestable J-K
# std/SRFlipFlop.java
srFlipFlopComponent = Biestable S-R
# std/Random.java
randomSeedAttr = Semilla
randomComponent = Generador al azar
randomQTip = Output: current number in sequence
randomClockTip = Clock: value may update on trigger
randomNextTip = Enable: steps to next in sequence on clock trigger
randomResetTip = Clear: When 1, resets to initial seed asynchronously
# std/Register.java
registerComponent = Registro
registerQTip = Output: register's current value
registerDTip = Data: value stored on clock trigger
registerClkTip = Clock: value updates on trigger 
registerClrTip = Clear: When 1, pin value to 0 asynchronously
registerEnableTip = Enable: When 0, clock triggers are ineffective
registerLabel = reg
registerWidthLabel = (%sb)
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
romContentsAttr = Contenidos
romContentsValue = (click para editar)
romChangeAction = Editar contenidos de la ROM
# std/Ram.java
ramAddrWidthAttr = Address Bit Width
ramDataWidthAttr = Data Bit Width
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = Data: value loaded from address
memAddrTip = Address: location accessed in memory
memCSTip = Chip select: 0 disables component
ramClkTip = Clock: memory value updates on rise from 0 to 1 
ramOETip = Load: if 1, load memory to output
ramWETip = Store: if 1, store input to memory
ramClrTip = Clear: when 1, resets contents to 0 asynchronously
ramBusTip = Data: value loaded or stored at address
ramInTip = Input: value to be stored at address
ramBusAttr = Data Interface
ramBusSynchCombined = One synchronous load/store port
ramBusAsynchCombined = One asynchronous load/store port
ramBusSeparate = Separate load and store ports
ramEditMenuItem = Edit Contents...
ramClearMenuItem = Clear Contents
ramLoadMenuItem = Load Image...
ramSaveMenuItem = Save Image...
ramConfirmClearTitle = Confirm Clear
ramConfirmClearMsg = Are you sure you wish to zero out the memory?
ramLoadDialogTitle = Load RAM Image
ramLoadErrorTitle = Load Error
ramSaveDialogTitle = Save RAM Image
ramSaveErrorTitle = Save Error
# std/memory/ShiftRegister.java
shiftRegisterComponent = Shift Register
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Number of Stages
shiftRegParallelAttr = Parallel Load
shiftRegShiftTip = Shift: shift is disabled when 0
shiftRegClockTip = Clock: values may update on trigger
shiftRegClearTip = Clear: when 1, resets all to 0 asynchronously
shiftRegInTip    = Input: value to be shifted into first stage
shiftRegOutTip   = Output: is content of last stage
shiftRegLoadTip  = Load: when 1 (with shift = 0), all stages load from inputs
#
# std/Plexers.java
#
plexerLibrary = Plexores
plexerSelectBitsAttr = Seleccionar Bits
plexerThreeStateAttr = ¿Tercer Estado?
plexerDisabledAttr = Disabled Output
plexerDisabledFloating = Floating
plexerDisabledZero = Zero
plexerEnableAttr = Include Enable?
plexerSelectLocAttr = Select Location
plexerSelectTopRightOption = Top/Right
plexerSelectBottomLeftOption = Bottom/Left
# std/Multiplexer.java
multiplexerComponent = Multiplexor
multiplexerSelectTip = Select: identifies which input becomes output
multiplexerEnableTip = Enable: when not 0, output is the selected input
multiplexerInTip = Input %s
multiplexerOutTip = Output
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexor
demultiplexerSelectTip = Select: identifies which output receives input
demultiplexerEnableTip = Enable: when not 0, selected output is input
demultiplexerInTip = Input
demultiplexerOutTip = Output %s
# std/Decoder.java
decoderComponent = Decodficador
decoderSelectTip = Select: identifies which output is 1
decoderEnableTip = Enable: when not 0, selected output is 1
decoderOutTip = Output %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Priority Encoder
priorityEncoderInTip = Input %s
priorityEncoderOutTip = Output: address of highest-indexed 1 input
priorityEncoderEnableInTip = Enable Input: 0 disables the component
priorityEncoderEnableOutTip = Enable Output: 1 if enabled and no inputs are 1
priorityEncoderGroupSignalTip = Group Select: 1 if enabled and any input is 1
# std/BitSelector.java
bitSelectorComponent = Selector de bits
bitSelectorGroupAttr = Bits de salida
bitSelectorOutputTip = Output: value of selected group of bits from data
bitSelectorDataTip = Data
bitSelectorSelectTip = Select: identifies which group from data is selected
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmética
# arith/Adder.java
adderComponent = Sumador
adderInputTip = Input: one of the numbers to add
adderOutputTip = Output: the sum of the inputs (plus carry in)
adderCarryInTip = Carry In: if 1, an additional 1 is added to output
adderCarryOutTip = Carry Out: 1 if the sum overflows the available bits
# arith/Subtractor.java
subtractorComponent = Restador
subtractorMinuendTip = Minuend: the number from which to subtract
subtractorSubtrahendTip = Subtrahend: the number to subtract from the minuend
subtractorOutputTip = Output: the difference of the minuend and the subtrahend
subtractorBorrowInTip = Borrow In: if 1, output is decreased by 1
subtractorBorrowOutTip = Borrow Out: 1 if the difference yields a negative value
# arith/Multiplier.java
multiplierComponent = Multiplicador
multiplierInputTip = Input: one of the numbers to multiply
multiplierOutputTip = Output: the product of the inputs, plus the carry in
multiplierCarryInTip = Carry In: an amount to be added into the output
multiplierCarryOutTip = Carry Out: the upper bits of the product
# arith/Divider.java
dividerComponent = Divisor
dividerUpperInput = upper
dividerRemainderOutput = rem
dividerDividendLowerTip = Dividend Lower: the lower half of the number to divide
dividerDividendUpperTip = Dividend Upper: the upper half of the number to divide
dividerDivisorTip = Divisor: the number by which to divide
dividerOutputTip = Output: the result of dividing the dividend by the divisor
dividerRemainderTip = Remainder: the remainder (dividend - output * divisor)
# arith/Negator.java
negatorComponent = Negador
negatorInputTip = Input: the number to be negated
negatorOutputTip = Output: the two's-complement negation of the input
# arith/Comparator.java
comparatorComponent = Comparador
comparatorType = Numeric Type
unsignedOption = Unsigned
twosComplementOption = 2's Complement
comparatorInputATip = A: the number preceding the comparison operation
comparatorInputBTip = B: the number following the comparison operation
comparatorLessTip = Less: 1 if A is less than B
comparatorEqualTip = Equal: 1 if A is equal to B
comparatorGreaterTip = Greater: 1 if A is greator than B
# arith/Shifter.java
shifterComponent = Shifter
shifterShiftAttr = Shift Type
shiftLogicalLeft = Logical Left
shiftLogicalRight = Logical Right
shiftArithmeticRight = Arithmetic Right
shiftRollLeft = Rotate Left
shiftRollRight = Rotate Right
shifterDistanceTip = Distance: how far to shift the input
shifterInputTip = Input: bits to be shifted
shifterOutputTip = Output: result of shifting the input
# arith/BitAdder.java
bitAdderComponent = Bit Adder
bitAdderInputTip = Input: the bits to be counted
bitAdderOutputManyTip = Output: how many input bits are 1
# arith/BitFinder.java
bitFinderComponent = Bit Finder
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderLowLabel = low
bitFinderHighOption = Highest-order %s
bitFinderLowOption = Lowest-order %s
bitFinderTypeAttr = Type
bitFinderIndexHighTip = Index: index of input's highest-order %s
bitFinderIndexLowTip = Index: index of input's lowest-order %s
bitFinderPresentTip = Present: 1 if input contains a %s
bitFinderInputTip = Input: the bits to be searched
#
# io
#
# io/Io.java
ioLibrary = Entrada/Salida
ioLabelCenter = Centro
ioBitWidthAttr = Número de bits
ioColorAttr = Color
ioLabelLocAttr = Posición de la etiqueta
ioLabelColorAttr = Color de la etiqueta
ioActiveAttr = Active On High?
# io/Button.java
buttonComponent = Botón
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Keyboard
keybDesc = keyboard (buffer cap. %s)
keybBufferLengthAttr = Buffer Length
keybClearTip = Clear: 1 empties buffer
keybClockTip = Clock: trigger consumes the buffer's front character
keybEnableTip = Read enable: 0 disables clock
keybAvailTip = Available: 1 when buffer contains characters
keybOutputTip = Data: ASCII value of buffer's front character
# io/Led.java
ledComponent = LED
# io/SevenSegment.java
sevenSegmentComponent = 7-Segment Display
# io/HexDigit.java
hexDigitComponent = Hex Digit Display
# io/DotMatrix.java
dotMatrixComponent = LED Matrix
ioMatrixInput = Input Format
ioMatrixRows = Matrix Rows
ioMatrixCols = Matrix Columns
ioOnColor = On Color
ioOffColor = Off Color
ioBackgroundColor = Background
ioMatrixPersistenceAttr = Light Persistence
ioMatrixShape = Dot Shape
ioInputColumn = Columns
ioInputRow = Rows
ioInputSelect = Select Rows/Columns
ioShapeCircle = Circular
ioShapeSquare = Square
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s rows, %s cols)
ttyDescShort = TTY
ttyRowsAttr = Rows
ttyColsAttr = Columns
ttyClearTip = Clear: 1 clears screen
ttyClockTip = Clock: trigger adds character on input
ttyEnableTip = Write enable: 0 disables clock
ttyInputTip = Data: ASCII value of next character to write
